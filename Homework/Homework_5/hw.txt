1. a. 

50
  20
    10
      XX
      15
    40
      30
        25
        35
      XX
  60
    XX
    70
      65
      80
        75
        XX

1. b. in-order: 10 15 20 25 30 35 40 50 60 65 70 75 80 
      pre-order: 5 20 10 15 40 30 25 35 60 70 65 80 75
      post-order: 15 10 25 35 30 40 20 65 75 80 70 60 50

1. c. 

50
  15
    10
    40
      25
        XX
        35
      XX
  60
    XX
    70
      65
      80
        75
        XX

2. a. 

struct Node 
{
	int value;
	Node* left;
	Node* right;
	Node* parent;
};

2. b.

Insert (newNode)
	if tree is empty:
		point root pointer to newNode;
		set newNode’s parent to nullptr
		return;
	else:
		let ptr point to the root node (let ptrNode denote the node it points to);
		repeatedly, while ptr is not nullptr:
			point newNode’s parent pointer to ptrNode’s parent;
			if  ptrNode’s value < newNode’s value, then point ptr to ptrNode’s right child;
 			else point ptr to ptrNode’s left child;
		if newNode’s parent’s value < newNode’s value, then let newNode be its parent’s right child;
		else let newNode be its parent’s right child;
		return;

3. a. 

8
  3
    0
    2
  6
    4
    XX

3. b.

8 3 6 0 2 4

3. c. 

6 3 4 0 2 

4. a. O(C+S)
   b. O(logC + S)
   c. O(logC + logS)
   d. O(logS)
   e. O(1)
   f. O(logC + S)
   g. O(SlogS)
   h. O(ClogS)



 



				
		

